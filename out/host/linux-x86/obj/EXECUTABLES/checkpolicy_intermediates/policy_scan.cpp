#line 2 "/root/oran/out/host/linux-x86/obj/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

#line 4 "/root/oran/out/host/linux-x86/obj/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 214
#define YY_END_OF_BUFFER 215
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1040] =
    {   0,
        0,    0,  215,  213,  193,    1,  198,  213,  192,  213,
      203,  204,  212,  200,  208,  209,  181,  185,  185,  201,
      202,  213,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  207,  210,  199,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  205,  213,  206,  211,
      193,    1,  195,    0,    0,  192,  192,  196,  181,  189,
      185,    0,  186,  186,  186,    0,  188,  194,  184,    0,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  100,  184,  184,  184,  184,  160,
      162,  184,   38,  184,  184,  156,  158,  184,  184,  184,
      184,  184,  184,  184,   91,  184,  184,  184,  184,  138,
      140,  142,  184,  184,  184,  184,  184,  184,  184,  150,
      152,  154,  184,  184,  184,  184,  144,  146,  148,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,   99,  184,  184,  184,  159,  161,  184,
       39,  184,  184,  155,  157,  184,  184,  184,  184,  184,
      184,  184,   92,  184,  184,  184,  184,  137,  139,  141,
      184,  184,  184,  184,  184,  184,  184,  149,  151,  153,

      184,  184,  184,  184,  143,  145,  147,  184,  184,  184,
      197,  183,    0,  182,  192,  189,  189,  185,  186,  186,
      186,  186,  186,  185,  185,    0,  188,  184,  184,  184,
      184,  184,   93,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  106,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  180,  184,  184,  184,
      184,  184,   95,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,   14,  184,  184,  184,  184,  184,
      184,  184,   98,  184,  184,   94,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  105,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  179,
      184,  184,  184,  184,  184,   96,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,   15,  184,  184,
      184,  184,  184,  184,  184,   97,  192,  189,  189,  185,
      186,  186,  186,    0,  184,  184,  184,  184,  184,  184,
       34,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,   40,  184,  184,  184,  184,  178,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,   16,  184,  184,
      184,  184,  102,  184,   32,   70,  184,  184,  184,  184,

      184,   35,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,   41,  184,  184,  184,  184,  177,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,   17,  184,
      184,  184,  184,  101,  184,   33,   71,  184,  192,  189,
      189,  189,  185,    0,   42,   74,  184,  184,  184,    6,
        2,  184,  184,  184,  184,  108,  184,  184,  104,  112,
      184,  184,  184,  184,  184,  184,   62,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
       64,  184,  184,   18,  184,  184,  184,  184,  184,  184,

      184,  184,   24,  184,  184,   43,   75,  184,  184,  184,
        7,    3,  184,  184,  184,  184,  107,  184,  184,  103,
      184,  111,  184,  184,  184,  184,  184,   63,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,   65,  184,  184,  184,   19,  184,  184,  184,  184,
      184,  184,  184,  184,   25,  184,  192,  189,  189,  184,
      184,  184,  184,    4,  184,  184,  184,  184,  184,  184,
      184,  109,  184,  184,  184,  184,  184,  184,   88,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,   82,   84,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,    5,  184,
      184,  184,  184,  184,  184,  184,  110,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,   83,   85,
      184,  184,  184,  184,  184,  184,  184,  184,  191,  191,
      187,  189,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  118,  184,  184,  184,  120,  184,  114,  184,   89,
      184,  184,  184,  184,   36,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  117,  184,  184,  184,  119,  184,  113,  184,  184,
      184,  184,  184,   37,  184,  184,  184,  184,  184,  184,
      184,  192,  187,  184,  184,  184,   60,  184,  184,  184,
      184,  184,  184,  184,  136,   12,  122,  184,  176,  184,
      184,  116,  184,   90,  184,  184,  184,  184,  184,  184,
       86,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,   61,  184,  184,  184,  184,  184,  184,  184,
      135,   13,  121,  184,  175,  184,  184,  115,  184,  184,
      184,  184,  184,  184,  184,   87,  184,  184,  184,  184,

      184,  184,  184,  184,  192,  187,   44,  184,   78,    8,
      184,  184,  184,  184,   58,   80,  184,  184,  184,  124,
      184,  184,  184,  184,  184,  164,  184,  184,  184,  184,
       26,  184,  184,  184,  184,  184,  184,   45,  184,   79,
        9,  184,  184,  184,  184,   59,   81,  184,  184,  184,
      123,  184,  184,  184,  184,  184,  163,  184,  184,  184,
      184,  184,  184,  184,   27,  184,  184,  184,  192,  190,
      184,   76,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,   72,  184,  166,  184,  184,  184,  184,  184,
       30,  184,  184,  184,  184,  184,   77,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,   73,  184,  165,
      184,  184,  184,  184,  184,  184,  184,  184,   31,  184,
      184,  184,  184,  184,  184,  184,  132,  184,  184,  184,
      184,  184,  184,  184,  184,   56,  184,   50,   48,  184,
      184,  184,  184,  184,  184,  184,  184,  131,  184,  184,
      184,  184,  184,  184,  184,  184,   57,   51,   49,  184,
      184,  184,  184,  184,  170,  172,  168,  184,  134,  130,
       66,  184,  126,  184,  184,  184,  184,  184,  184,  184,
      184,  169,  171,  167,  184,  133,  129,   67,  184,  125,
      184,  184,  184,  184,  184,  184,  184,  174,  128,  184,

      184,   20,  184,   28,  184,   10,  184,  173,  127,  184,
      184,  184,   21,  184,   29,   11,   22,  184,  184,  184,
      184,   23,  184,  184,  184,  184,  184,  184,   52,   46,
      184,  184,   53,   47,   68,   54,   69,   55,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    8,    9,    8,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   22,   22,   22,   22,   22,   23,   24,    8,
       25,    8,    8,    8,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   35,
       51,    8,   52,   53,   54,    8,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   35,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   35,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    2,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    3,    4,    5,    6,    7,    8,    8,    8,
        8,    8,    9,    4,    4,    8,    8,    8,    8,    8,
        8,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        4,    4,    4,   11,    8,    8,    8,    8,    8,    8,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    4,    4,
        4,    3
    } ;

static yyconst flex_int16_t yy_base[1056] =
    {   0,
        0,    0, 2375, 2376,   81,    0, 2349, 2356, 2307, 2362,
     2376, 2376, 2376, 2376, 2376, 2376,    0,   70,  132, 2347,
     2376, 2344,  178,   65,   69,   94,   99,  130,  239,  151,
       82, 2338,  252,  142,   54,   77,  247,  281,  278,  294,
      306,   93,  102, 2376, 2376, 2376,  293,  296,  306,  309,
      333,  336,   57,  260,  135,  364,  263,  105,  234,  329,
      380,  350,  395,  400,  113,  116, 2376, 2287, 2376, 2376,
      176,    0, 2376,  160, 2360,    0, 2302, 2376,    0,  422,
      456, 2341,  499,  433,  542, 2340,    0, 2376, 2346,    0,
      585,    0, 2331,  319,  200,  243,  280,  276, 2315,  396,

      357,  316,  399,   73, 2329, 2321,  374, 2327,  244, 2326,
     2325,  259, 2324,  289,  419, 2323, 2322,  346,  359,  387,
      382,  416,  435,  417, 2321,  335,  415,  438,  458, 2320,
     2319, 2318,  394,  107,  397,  429,  440,  460,  360, 2317,
     2316, 2315,  461,  462,  463,  464, 2314, 2313, 2312, 2311,
      466,  467,  468,  299,  469,  304,  441, 2267,  477,  470,
      463,  509,  476, 2309, 2273,  520,  511, 2307, 2306,  505,
     2305,  522,  514, 2304, 2303,  156,  510,  513,  523,  516,
      537,  517, 2302,  519,  521,  557,  558, 2301, 2300, 2299,
      563,  564,  566,  587,  579,  589,  588, 2298, 2297, 2296,

      590,  591,  592,  594, 2295, 2294, 2293,  595,  602,  597,
     2376, 2376, 2316, 2376, 2254,    0,  617,  651,  694,    0,
        0,  665,  671,    0,    0, 2297,    0, 2303,  737,    0,
      622,  494, 2288,  621,  626,  620, 2287,  674,  619,  636,
      675, 2290,  665,  699,  697, 2285,  700,  698,  685,  645,
      667,  705, 2284, 2283,  706, 2282,  717,  713,  731,  668,
     2281, 2280, 2279,  739,  710,  732,  741,  742,  744,  748,
      745, 2278, 2277,  704, 2276,  755,  749, 2275,  756, 2274,
      757,  754, 2273,  760,  769, 2272,  625,  771,  773,  772,
      774,  775,  777,  776, 2246,  778,  784,  779,  780,  781,

      796,  783,  789,  788,  786,  796,  797,  790,  798,  802,
      803,  791,  799,  800,  805, 2270,  806,  814,  795,  793,
      836,  794,  815,  838,  841,  843,  844, 2269,  847,  845,
      849,  850,  851,  852,  854, 2268, 2238,  867,  874,  906,
      912,  918,  924, 2273,  868,  874,  871,  873,  877,  918,
     2265,  919,  920, 2264,  879,  922,  930,  926,  925,  927,
      932, 2263, 2262,  929,  945,  935, 2261,  939,  940,  942,
      941,  883,  957,  948,  955,  956,  961,  944,  966,  965,
     2260,  967,  970,  974,  978, 2259,  969,  981,  980,  979,
      984, 2258, 2257,  988,  990, 2256,  992,  952,  989,  993,

      997, 2255,  853,  999,  998, 1000, 1001, 1009, 1003, 1006,
     1008, 1007, 2254, 1010, 1025, 1012, 1013, 2253, 1015, 1016,
     1020, 1017, 1024, 1032, 1022, 1021, 1028, 1031, 1025, 1023,
     1033, 1019, 1029, 1042, 1043, 1047, 1036, 1052, 1068, 1034,
     1072, 1073, 1075, 2252,  127, 1077, 2251, 1079, 2276, 1098,
     2263,    0, 1123, 2255, 2247, 2246, 1083, 1095, 1096, 2245,
     2244, 1099, 1117, 1118, 2243, 2242, 1124, 1081, 2241, 2240,
     1135, 1128, 1122, 1123, 1131, 1132, 2239, 1148, 1136, 1137,
     2238, 1140, 1143, 1141, 1146, 1142, 1148, 1150, 1149, 1153,
     1154, 1157, 1156, 2237, 1172, 1161, 1164, 2236, 1165, 1166,

     1167, 1176, 2235, 1186, 1181, 2234, 2233, 1183, 1168, 1185,
     2232, 2231, 1188, 1189, 1191, 1190, 2230, 1192, 1195, 2229,
     1211, 2228, 1200, 1037, 1198, 1202, 1199, 2227, 1217, 1204,
     1208, 1205, 1206, 1207, 1210, 1212, 1211, 1213, 1214, 1215,
     1216, 1220, 1218, 1235, 1222, 2226, 1224, 1228, 1235, 1236,
     1237, 1259, 1238, 1246, 2225, 1251, 1299, 1308, 1315, 1082,
     1253, 2224, 1257, 2223, 1262, 1267, 1268, 1285, 1275, 1291,
     1308, 2222, 1309, 1310, 1313, 1326, 1247, 1317, 2221, 1316,
     1322, 1314, 1331, 1330, 1319, 1332, 1337, 1336, 1339, 2220,
     1338, 1353, 2219, 1340, 2218, 2217, 2216, 1342, 1343, 1347,

     1362, 1364, 1363, 1352, 1351, 1355, 1356, 1357, 2215, 1359,
     1360, 1361, 1362, 1368, 1383, 1370, 2214, 1371, 1372, 1373,
     1388, 1375, 1378, 1377, 1381, 1383, 1380, 1379, 1382, 1386,
     1391, 1388, 1401, 1392, 1407, 1389, 1397, 1394, 2213, 2212,
     1401, 1420, 1416, 1423, 1413, 1422, 1428, 1431, 1445, 1465,
     1470, 2225, 1451, 1440, 1429, 1443, 1467, 1269, 1468, 1475,
     1476, 1463, 1441, 1469, 1470, 1477, 1498, 1485, 1489, 1486,
     1490, 2210, 1491, 1494, 1499, 2209, 1506, 2208, 1507, 2207,
     1496, 1518, 1505, 1507, 2206, 1512, 1510, 1513, 1525, 1529,
     1530, 2205, 1517, 1519, 1525, 1527, 1528, 1529, 1530, 1531,

     1532, 1547, 1535, 1534, 1536, 1539, 1552, 1540, 1541, 1542,
     1543, 2204, 1545, 1547, 1548, 2203, 1557, 2202, 1558, 1560,
     1550, 1551, 1552, 2201, 1563, 1569, 1570, 1564, 1559, 1566,
     1567, 2224, 1618, 2199, 1601, 1593, 2198, 1612, 1601, 2197,
     2196, 1604, 1629, 1632, 2195, 2194, 2193, 1620, 2206, 1622,
     1602, 2191, 1623, 2190, 2189, 1624, 1626, 1644, 1627,  247,
     2188, 1632, 1634, 1639, 1645, 1577, 1652, 1660, 1647, 1650,
     1651, 1652, 2187, 1653, 1668, 1655, 1656, 1658, 1673, 1671,
     2186, 2185, 2184, 1660, 2197, 1661, 1663, 2182, 1665, 1664,
     1668, 1666, 1681, 1684, 1671, 2181, 1674, 1686, 1689, 1687,

     1676, 1677, 1680, 1682, 2204,    0, 1692, 1681, 2179, 2178,
     1731,  687, 1705, 2177, 2176, 2175, 1708, 1734, 1740, 2174,
     1687, 1728, 1729, 1570, 2173, 2172, 1745, 1735, 1747, 1734,
     2171, 1739, 1737, 1754, 1752, 1756, 1744, 1745, 1746, 2170,
     2169, 1762, 1764, 1767, 1759, 2168, 2167, 1772, 1774, 1776,
     2166, 1764, 1763, 1765, 1766, 1767, 2156, 1785, 1782, 1772,
     1773, 1789, 1788, 1790, 2148, 1777, 1779, 1782, 2170, 2169,
     1792, 2141, 1795, 1794, 1797, 1827, 1786, 1804, 1809, 1811,
     1825, 2139, 2134, 1828, 2125, 1816, 1791, 1829, 1831, 1834,
     2123, 1849, 1850, 1851, 1843, 1799, 2107, 1808, 1855, 1856,

     1858, 1846, 1862, 1861, 1866, 1853, 1854, 2103, 1856, 2089,
     1871, 1872, 1859, 1860, 1875, 1876, 1878, 1866, 2080, 1867,
     1879, 1882, 1885, 1888, 1884, 1869, 2083, 1886, 1889, 1686,
     1876, 1906, 1895, 1878, 1915, 2066, 1907, 2079, 2077, 1926,
     1914, 1891, 1894, 1930, 1932, 1896, 1919, 2075, 1934, 1938,
     1921, 1926, 1927, 1942, 1945, 1934, 2060, 2073, 2070, 1946,
     1935, 1933, 1953, 1950, 2069, 2068, 2067, 1938, 2066, 2065,
     2050, 1940, 2049, 1956, 2048, 1958, 2047, 1959, 1951, 1957,
     1962, 2058, 2057, 2055, 1946, 2054, 2053, 2038, 1949, 2036,
     1966, 1968, 1955, 1970, 1966, 1968, 1981, 2049, 2034, 1986,

     1994, 2033, 1986, 2031, 1987, 2030, 1988, 2043, 2028, 1987,
     1999, 2007, 2026, 2008, 2023, 2022, 2034, 1999, 2014, 2016,
     2018, 2033, 2005, 2020, 2025, 2027, 2007, 2028, 2032, 1692,
     2015, 2030, 1456, 1306, 1280,  806,  596,  369, 2376, 2097,
     2106, 2117, 2124, 2130, 2133, 2140, 2146, 2150, 2153, 2157,
     2162, 2169, 2173, 2175, 2184
    } ;

static yyconst flex_int16_t yy_def[1056] =
    {   0,
     1039,    1, 1039, 1039, 1039, 1040, 1039, 1041, 1042, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1043, 1044, 1044, 1045,
     1039, 1039, 1039,   23,   23,   23,   23,   23,   23,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29, 1039, 1039, 1039,   23,   23,   23,   23,
       23,   23,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29, 1039, 1039, 1039, 1039,
     1039, 1040, 1039, 1041, 1046, 1042, 1042, 1039, 1043, 1047,
       19, 1045, 1048, 1048, 1048, 1049, 1050, 1039, 1051, 1052,
       29,   91,   29,   29,   29,   29,   29,   29,   91,   29,

       29,   91,   29,   29,   29,   91,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   91,   29,   29,
       91,   29,   29,   29,   91,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
     1039, 1039, 1046, 1039, 1042, 1047, 1047,   19, 1048,  219,
      219, 1048, 1048,   85,   85, 1053, 1050, 1052,   91,  229,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  229,   29,   29,   29,   29,   29,   29, 1051,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  229,   29,   29,   29,   29,   29,

     1051,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29, 1042, 1047, 1047, 1044,
     1048, 1048, 1048, 1054,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29, 1051,   29,   29,   29,   29,   29,
       29,   29, 1051,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29, 1051,   29,   29,   29,   29,   29,
       29,   29,   29, 1051,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1042, 1047,
     1047, 1047, 1044, 1039,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
     1051,   29,   29,   29,   29,   29,   29, 1051,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29, 1051,   29,   29,   29,   29,   29,

       29,   29,   29, 1051,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
     1051,   29,   29,   29,   29,   29,   29,   29, 1051,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29, 1051,   29,   29,   29,   29,   29,   29,
       29, 1051,   29,   29,   29,   29, 1042, 1047, 1047,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29, 1051,
       29,   29,   29,   29,   29, 1051,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1051,   29,
       29, 1051,   29,   29,   29,   29,   29,   29,   29,   29,

     1051, 1051, 1051,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29, 1051,   29,   29,   29,   29,   29,
     1051,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29, 1051,   29, 1051,   29,   29,   29,   29,   29,
       29, 1051, 1051, 1051,   29,   29,   29,   29, 1042, 1042,
     1047, 1047,   29,   29,   29,   29,   29,   29,   29,   29,
       29, 1051,   29,   29,   29,   29, 1051,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1051,   29,
       29, 1051,   29,   29,   29,   29,   29,   29, 1051, 1051,
     1051,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29, 1051,   29,   29,   29,   29, 1051,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1051, 1051,
       29,   29,   29,   29, 1051, 1051, 1051,   29,   29,   29,
       29, 1042, 1047,   29,   29,   29,   29,   29, 1051,   29,
       29,   29, 1051, 1051,   29,   29,   29,   29, 1051,   29,
       29,   29,   29,   29,   29,   29,   29, 1051,   29, 1051,
       29,   29,   29,   29,   29, 1051, 1051, 1051,   29,   29,
       29,   29,   29,   29, 1051,   29,   29,   29, 1051, 1051,
       29,   29,   29,   29, 1051,   29,   29,   29,   29,   29,
       29,   29, 1051, 1051,   29,   29,   29, 1051, 1051, 1051,

       29,   29,   29,   29, 1055, 1047,   29,   29,   29,   29,
     1051, 1051, 1051,   29,   29,   29, 1051, 1051, 1051,   29,
       29,   29,   29,   29,   29,   29, 1051,   29, 1051,   29,
       29,   29,   29, 1051, 1051, 1051,   29,   29,   29,   29,
       29, 1051, 1051, 1051,   29,   29,   29, 1051, 1051, 1051,
       29,   29,   29,   29,   29,   29,   29, 1051, 1051,   29,
       29, 1051, 1051, 1051,   29,   29,   29,   29, 1055, 1055,
     1051,   29, 1051, 1051, 1051, 1051,   29, 1051, 1051, 1051,
       29,   29,   29,   29,   29, 1051,   29, 1051,   29,   29,
       29, 1051, 1051, 1051,   29, 1051,   29, 1051, 1051, 1051,

     1051,   29, 1051, 1051, 1051,   29,   29,   29,   29,   29,
     1051, 1051,   29,   29, 1051, 1051, 1051,   29,   29,   29,
     1051, 1051, 1051, 1051, 1051,   29, 1051, 1051, 1051,   29,
       29,   29, 1051,   29, 1051,   29,   29, 1051, 1051, 1051,
       29, 1051, 1051, 1051, 1051, 1051,   29, 1051, 1051, 1051,
       29,   29,   29, 1051, 1051,   29,   29, 1051, 1051, 1051,
       29,   29, 1051, 1051, 1051, 1051, 1051,   29, 1051, 1051,
       29,   29,   29, 1051,   29, 1051,   29, 1051,   29, 1051,
     1051, 1051, 1051, 1051,   29, 1051, 1051,   29,   29,   29,
     1051, 1051,   29, 1051,   29,   29, 1051, 1051,   29,   29,

     1051,   29, 1051,   29, 1051,   29, 1051, 1051,   29,   29,
     1051, 1051,   29, 1051,   29,   29, 1051,   29, 1051, 1051,
     1051, 1051,   29, 1051, 1051, 1051,   29, 1051, 1051, 1051,
       29, 1051, 1051, 1051,   29, 1051,   29, 1051,    0, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039
    } ;

static yyconst flex_int16_t yy_nxt[2459] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,   10,   11,
       12,   13,    4,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   32,   33,   34,   35,   36,
       37,   32,   38,   39,   40,   41,   42,   32,   43,   32,
       44,   45,   46,    4,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   32,   56,   57,   58,   59,   60,   32,
       61,   62,   63,   64,   65,   32,   66,   32,   67,   68,
       69,   70,   71,  122,   71,   80,   93,   81,   81,   81,
       81,   81,   82,  123,   99,   83,   83,   83,   83,   83,

       83,   93,   93,   93,   98,  100,   93,   93,  101,   93,
       93,   93,  113,   93,   93,  167,  246,  124,  151,  125,
      114,  115,   93,  102,   83,   83,   83,   83,   83,   83,
       93,   93,   93,  103,   93,  104,   93,   93,   93,   93,
      105,  152,   93,   93,   93,   93,   85,   80,  271,   81,
       81,   81,   81,   81,   82,  106,   93,   83,   83,   83,
       83,   83,   83,  180,   93,  212,   93,  209,   93,  110,
      111,   93,  181,  107,   93,   93, 1039,   71,  120,   71,
       93,  121,  551,  210,  112,   93,   83,   83,   83,   83,
       83,   83,   89,   90,  171,   91,   91,   91,   91,   91,

       82,  172,  173,   92,   92,   92,   92,   92,   92,   93,
       93,   93,   93,   93,   94,   93,   95,   93,   93,   93,
       93,   93,   96,   97,   93,   93,   93,   93,  233,   93,
      309,   89,   92,   92,   92,   92,   92,   92,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,  108,  108,  108,  108,
      108, 1039,   90,   93,   93,   93,   93,   93,  109,   93,
      116,  117,   93,   93,  126,   93,  127,   93,  168,  169,
      128,  118,  250,   93,   93,  829,  129,  234,   93,   93,
      251,  119,   93,   93,   93,   93,   93,   93,   93,  130,

      131,  132,  182,  136,  183,   93,  133,  137,  235,   93,
      134,  138,  140,  141,  142,  236,  252,  139,   93,  143,
      135,  253,  170,   93,  147,  148,  149,  178,   93,   93,
      179,   93,   93,   93,   93,   93,  144,   93,   93,  145,
       93,   93,   93,  146,   93,   93,  242,   93,   93,  150,
       93,   93,  231,   93,   93,  232,  286,  153,   93,  154,
      158,  288,  243,  157,   93,  155,  156,  161,  265,   93,
      159,   93,   93,  160,   93,   93,  162,   93,   93,   93,
       93,   93,  174,  175,   90,  184,   93,  185,   93,   93,
      165,  186,  256,   93,  240,  241,  187,  163,  188,  189,

      190,  248,  164,   93,  194,  276,  257,  166,  195,   93,
      259,   93,  196,  198,  199,  200,   93,  197,  205,  206,
      207,  238,  176,   93,   93,   93,   93,  249,   93,   93,
      258,  177,  270,  272,  191,  239,  244,  245,  192,  217,
      217,  217,  217,  217,   93,   93,   93,  193,   93,  201,
      223,  223,  223,  223,  223, 1039,  254,  266,   93,  255,
      260,  264,  261,  262,   93,  202,  273,   93,  203,   93,
       93,  208,  204,  218,  218,  218,  218,  218,  274,  263,
      267,  219,  219,  219,  219,  219,  219,   93,  275,   93,
       93,   93,   93,   93,  268,   93,   93,   93,   93,   93,

      269,  279,  282,  277,  280,   93,   93,  278,  289,  283,
      219,  219,  219,  219,  219,  219,  220,  220,  220,  220,
      220,   82,  295,   93,  221,  221,  221,  221,  221,  221,
      284,  291,  285,  348,   93,  293,  294,  296,   93,   93,
       93,  287,   93,   93,  292,   93,   93,  299,   93,   93,
       93,   93,   93,  221,  221,  221,  221,  221,  221,  224,
      224,  224,  224,  224, 1039,  304,   93,  225,  225,  225,
      225,  225,  225,  301,  297,  298,  302,  303,  305,  307,
      312,  318,  308,  306,  311,  310,   93,   93,  313,  317,
      314,  319,   93,   93,  315,   93,  225,  225,  225,  225,

      225,  225,  229,  229,  229,  229,  229,   82,   93,  316,
      230,  230,  230,  230,  230,  230,   93,   93,   93,   93,
       93,   93,  321,   93,   93,   93,   93,  320,  322,  323,
      325,   93,  338,  324,  339,  339,  339,  339,  339,  230,
      230,  230,  230,  230,  230,  327,  328,  347,   93,   93,
       93,   93,  326,  334,   93,   93,  351,  354,  332,  350,
      330,  329,  333,  349,  331,   93,  335,  336,  340,  340,
      340,  340,  340,  355,   93,  366,  341,  341,  341,  341,
      341,  341,  223,  223,  223,  223,  223, 1039,  223,  223,
      223,  223,  223, 1039,   93,  400,   93,   93,  358,  367,

       90,  377,   90,   93,   93,  341,  341,  341,  341,  341,
      341,  342,  342,  342,  342,  342,   82,  353,  356,  343,
      343,  343,  343,  343,  343,  359,   93,   93,   93,   93,
      365,  373,  360,   93,   93,   93,  875,  364,  381,   93,
      374,  361,   93,  363,  368,  371,   93,  390,  343,  343,
      343,  343,  343,  343,  345,  345,  345,  345,  345,  375,
       93,   93,  346,  346,  346,  346,  346,  346,   93,  382,
       93,   93,  380,   93,   93,  384,  376,   93,   93,  386,
      392,  394,  383,   93,   93,   93,   93,  397,  385,   93,
      387,  346,  346,  346,  346,  346,  346,  391,   93,  396,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   90,   93,   93,  398,   93,  424,   93,   93,   93,
       93,   90,   93,   93,   93,   93,   93,   93,   93,   93,
      403,   93,   93,  401,   93,   93,  399,  402,  413,  410,
      409,  405,  406,   93,   93,  404,  411,  407,  417,  418,
      416,  412,  414,  419,  420,  421,  423,  422,  429,  425,
      433,  428,  434,  430,  427,   93,  436,   93,  431,  415,
       93,  432,   93,   93,   93,  437,   93,  426,   93,   93,
       93,   93,   93,   93,  450,  450,  450,  450,  450,  338,
       82,  451,  451,  451,  451,  451,   82,   93,  435,  439,

       93,  440,   93,   93,  445,  443,   93,  444,   93,  446,
      457,  438,   93,  510,  455,  441,  448,  442,  462,  477,
      456,  452,  447,  453,  453,  453,  453,  453,   82,  223,
      223,  223,  223,  223,   82,  223,  223,  223,  223,  223,
       82,  223,  223,  223,  223,  223,   82,   93,   93,   93,
      459,   93,   82,  465,   93,   93,   93,  468,   93,   93,
       90,   93,  458,  460,   93,  467,  463,  470,   93,   93,
       93,   93,   90,   93,  466,  464,  473,   93,  472,  475,
      480,   93,  474,  476,   93,   93,  483,  479,  471,  478,
       93,  482,  481,  484,   93,   93,   93,  488,   93,   93,

      487,  489,  492,   93,  485,  490,  493,   93,   93,   93,
       93,  498,  497,   93,  500,  501,  502,   93,   93,   93,
      505,   93,   93,  506,  494,  496,   93,   93,   93,   93,
       93,   82,   93,  503,  495,   93,   93,   93,   93,   93,
       90,   93,   93,  504,   93,   93,   93,   90,   93,   93,
       93,   93,   93,   93,   93,  508,  512,   93,   93,  516,
       93,  519,   93,   93,  507,   93,   93,  513,  520,  509,
      511,   93,   93,  514,  518,  531,   93,  537,  522,  535,
      524,   93,  515,  517,  523,  526,  525,  527,  528,  530,
      533,  538,  532,  529,  542,  534,  521,   93,  539,  540,

      536,   93,   93,  541,   93,  617,   93,  547,   93,  560,
       93,   93,   93,  558,  543,  559,  559,  559,  559,  559,
      561,  544,  545,  562,   93,   93,  569,  653,   93,  549,
      552,  553,  554,  550,  548,  563,  556,  564,  452,  546,
      453,  453,  453,  453,  453, 1039,   93,   93,  555,  568,
       90,   93,   93,   93,  566,  571,  573,   93,  574,  565,
       93,   93,  572,   90,  570,   93,   93,  580,  581,   93,
       93,   93,   93,  578,  577,   93,  575,   93,   93,   93,
      582,  576,   93,   93,  583,   93,   93,   90,  584,  586,
       93,  585,  588,   93,   93,   93,   93,   93,  587,  590,

      591,   90,  597,  598,  593,   93,  604,  589,  594,  596,
       93,  599,   93,  601,   93,  600,  592,   93,   93,   93,
       93,   93,  606,  602,   93,  607,   90,   93,   93,   93,
      603,   93,   90,   93,   93,   93,   93,   93,  605,   93,
       93,   93,   93,   93,   93,   93,  613,   93,  612,   93,
       90,   93,  608,   93,  609,  611,  616,   93,  619,  610,
      618,  625,  624,  579,   93,   93,   93,   93,  614,  615,
      622,  620,  623,  633,   90,   93,   93,  626,  627,  621,
       93,  630,   93,  632,  629,  628,   93,  657,  634,  654,
      668,   93,  631,  639,  636,  637,   93,   93,   93,  656,

      638,  641,  645,  661,   93,  648,   90,  635,  640,   93,
      646,  658,  659,  647,   93,  642,  649,  650,  649,  649,
      649,   90,  739,  660,  643,  651,  651,  651,  651,  651,
      558,  644,  652,  652,  652,  652,  652,   93,   93,   93,
      666,   90,   93,   93,  662,   93,   93,  663,   93,  665,
      669,   93,  672,  664,   90,  670,  673,  667,  671,   93,
       93,   93,  675,  674,  677,   93,   93,   93,   90,   93,
      676,   93,   93,  684,  678,  686,   93,   90,   90,   90,
       93,   93,  681,  679,   93,   93,   93,  687,   93,   93,
       93,   93,  688,  690,  689,  682,  692,   93,   90,   93,

       93,   93,   93,   90,   93,  691,   93,   93,   93,   93,
       93,   93,   93,  697,  695,   93,   90,   93,   93,  694,
       93,   93,   90,   93,  693,  701,   93,  696,  700,  706,
       93,   90,  698,  699,  713,   90,  702,  703,   90,  705,
      709,  714,   93,  704,  710,  711,  708,  717,  707,  712,
      680,   93,  716,  715,  718,  722,  723,   93,   93,  724,
       93,  721,  649,  649,  649,  649,  649,  736,  732,   93,
       93,   90,   93,  719,  726,  728,  735,  720,   90,  745,
       93,  725,  649,  649,  649,  649,  649,  733,  733,  733,
      733,  733,  737,  727,  729,  734,   93,   93,   93,   93,

      738,  730,  741,  731,   93,   93,   93,  743,  747,  742,
      740,  744,  746,   90,   93,   93,  748,  751,   93,   93,
       93,  755,   90,   93,  752,   93,  753,  754,   93,  750,
      749,  757,  756,   90,   93,   93,   93,  763,  759,   93,
       90,   93,   93,  760,   90,   90,   93,  761,   93,  758,
      766,  765,  764,  762,   93,  768,   93,   93,   93,   93,
       93,   93,   90,   93,   93,   93,  767,   90,   93,   93,
       93,   93,   93,   90,   93,   90,   93,   93,   90,   93,
       93,   93,  775,  771,   90,   90,   93,  777,   93,  770,
      774,  772,   90,   93,  778,   93,   93,  884,  787,   93,

      776,  781,  783,  790,  773,  782,  784,  789,  788,  754,
      791,  792,  786,  785,  794,  834,   90,  798,  801,  779,
      795,  796,   93,  780,  800,  804,  797,  822,  793,  802,
       93,   93,  803,   93,  799,  806,  806,  806,  806,  806,
      808,   93,  809,  811,   90,  812,  813,   90,  816,   93,
      810,   93,   93,   93,  817,   93,   93,  819,  820,   90,
      828,   93,  823,   93,  821,  830,  826,   90,   93,  827,
      825,  818,  832,  833,   93,   90,   93,  831,  835,   93,
       93,   93,   93,   90,   93,   93,   90,   93,   90,   93,
       93,  837,   93,   93,   93,   93,   90,   93,  836,   90,

       93,   90,   90,   93,   90,   93,   93,   90,  838,   93,
       93,   93,  881,  845,  846,   93,   93,  853,  839,  841,
       90,   93,  855,   90,  971,  850,  851,  848,  872,  840,
      847,  852,  854,  860,  857,  858,  861,  867,  842,  866,
      843,  844,  856,  849,  863,  871,   90,  865,  876,   90,
      859,  878,  862,  864,  868,   90,  873,   93,   93,  879,
       90,  887,   90,   93,   93,  890,   93,   90,   93,   90,
      874,   90,  882,   93,   93,   93,  883,   90,  889,   90,
      891,  893,   90,  886,  880,  892,  895,   90,   93,   90,
      888,   90,   93,   93,   93,   93,   93,   90,  896,  894,

       90,   93,   93,   90,   90,   90,   93,   90,   93,   90,
       90,   93,   90,  926,   90,   93,  898,  902,  906,   90,
       93,  897,  909,   90,   90,  910,   90,  913,  904,  899,
      923,   90,  918,  922,  921,  907,  934,  924,  901,  927,
      908,  900,   90,  903,   90,  914,  916,  928,  905,  915,
      919,  911,  920,  912,   93,  929,  925,   93,  930,  933,
       93,  917,  935,   93,   90,   90,   90,  932,  941,  942,
       90,   90,   93,   90,  943,   93,   90,   90,  938,  937,
      936,   90,   93,   93,  940,   93,   90,   90,   93,   93,
       90,   90,  939,   90,   90,   93,   93,   90,   93,   90,

       90,   90,  947,   90,   90,   93,   90,   93,  968,   90,
       90,   90,  952,  964,  965,  951,  946,  966,  963,  944,
      972,  962,  975,  953,  945,  948,  967,  949,  974,  969,
       90,  970,  956,  958,  955,   93,   93,  957,  950,  961,
      960,   90,  954,   93,  973,   90,  959,   90,   93,   90,
       93,  977,  979,   90,  981,   93,   93,   90,  980,  976,
       90,   90,   93,   93,   93,   90,  984,   93,   90,   93,
      978,   90,   90,   90,   90,   93,  999,   90,   93,  998,
       93,   90, 1000,   90,   93,   90,  985,  988,  982,  997,
      983, 1003, 1005,  990, 1006,   93,   90,   93,  989,  996,

     1001,   90,   90,   90,  991,  986,  993,  995,  987,   90,
     1017, 1018, 1009, 1013,   90,   93,   93,  992,  994, 1010,
     1008, 1007,   90,   90, 1015, 1020, 1021, 1019,   93,   90,
     1012,   90, 1014,   90,   93,   90,   93, 1027, 1011, 1016,
       90, 1023,   90,   90,   93,   90, 1022,   90,   90,   90,
     1035,   93,   93, 1028, 1029,   93, 1030,   93,   90,   93,
       93, 1024,   93,   93,   90,   93, 1036,   93,   90,   90,
       90, 1031,   90,   90, 1025, 1026, 1004, 1002,   93,   93,
       90,   90,   90,   90,   90,   90, 1037, 1032,   90,   93,
       90, 1033,   90, 1034,   90,   93, 1038,   72,   90,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   74,   93,
       74,   74,   74,   74,   74,   74,   74,   76,   93,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   79,   79,
       79,   79,   93,   79,   79,   84,   93,   84,   84,   84,
       86,   86,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  216,   93,  216,   93,  216,  216,  222,  222,  222,
      226,  226,  227,   93,  227,  227,   89,   89,  931,   89,
       93,   89,   89,  228,  870,  870,  228,   93,  228,  228,
      344,  344,  454,  454,  869,   93,  869,  869,  869,  869,
      869,  869,  869,  869,  869,   93,   93,   93,   93,   93,

       93,   93,  885,   93,   93,   93,  877,   93,   93,  870,
       93,   93,   90,   93,   93,   93,   93,   93,  824,   93,
       93,   90,   93,   93,   93,  815,  814,   93,  807,  805,
       93,   93,   93,   93,  769,   93,   93,   93,   93,   93,
      558,   93,   93,   93,   93,  685,   93,   93,  683,  680,
       93,   93,   93,  655,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  595,   93,  579,   93,   93,
       93,   93,  567,   93,   93,   93,   93,   87,  338,  557,
       93,   93,   93,   93,   93,   93,   93,  499,  491,  486,
       93,  469,   93,  461,   93,   87,  449,   93,   93,   93,

      408,   93,   93,  395,  393,   93,  389,  388,   93,  379,
      378,  372,  370,  369,  362,  357,  352,   93,   90,   87,
      337,  214,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  300,   93,  290,
      281,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  247,   93,  237,
       93,   90,   87,   87,  215,  214,  211,   93,   88,   87,
       78,   77,   75,   73, 1039,    3, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039
    } ;

static yyconst flex_int16_t yy_chk[2459] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,   35,    5,   18,   53,   18,   18,   18,
       18,   18,   18,   35,   25,   18,   18,   18,   18,   18,

       18,   24,  104,   24,   24,   25,   36,   25,   25,   24,
       24,   31,   31,   25,   25,   53,  104,   36,   42,   36,
       31,   31,   42,   26,   18,   18,   18,   18,   18,   18,
       26,   43,   26,   26,   58,   27,  134,   27,   26,   26,
       27,   43,   65,   27,   27,   66,   18,   19,  134,   19,
       19,   19,   19,   19,   19,   28,  445,   19,   19,   19,
       19,   19,   19,   58,   55,   74,   28,   65,   28,   30,
       30,   34,   58,   28,   28,   28,   74,   71,   34,   71,
       30,   34,  445,   66,   30,  176,   19,   19,   19,   19,
       19,   19,   23,   23,   55,   23,   23,   23,   23,   23,

       23,   55,   55,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   95,   95,
      176,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   29,   29,   29,   29,
       29,   29,  760,   59,   29,   29,   29,   29,   29,   29,
       33,   33,   96,  109,   37,   29,   37,   29,   54,   54,
       37,   33,  109,   29,   29,  760,   37,   96,  112,   54,
      112,   33,   57,   29,   29,   29,   29,   29,   29,   38,

       38,   38,   59,   39,   59,   98,   38,   39,   97,   97,
       38,   39,   40,   40,   40,   98,  114,   39,  114,   40,
       38,  114,   54,   40,   41,   41,   41,   57,  154,   47,
       57,   47,   48,  156,   48,   41,   40,   47,   47,   40,
       48,   48,   49,   40,   49,   50,  102,   50,   94,   41,
       49,   49,   94,   50,   50,   94,  154,   47,   60,   47,
       49,  156,  102,   48,  126,   47,   47,   50,  126,   51,
       49,   51,   52,   49,   52,  118,   50,   51,   51,   62,
       52,   52,   56,   56, 1038,   60,  101,   60,  119,  139,
       52,   60,  118,   56,  101,  101,   60,   51,   61,   61,

       61,  107,   51,  107,   62,  139,  119,   52,   62,   61,
      121,  121,   62,   63,   63,   63,  120,   62,   64,   64,
       64,  100,   56,  133,   63,  100,  135,  107,  103,   64,
      120,   56,  133,  135,   61,  100,  103,  103,   61,   80,
       80,   80,   80,   80,  127,  122,  124,   61,  115,   63,
       84,   84,   84,   84,   84,   84,  115,  127,  136,  115,
      122,  124,  122,  123,  123,   63,  136,  128,   63,  137,
      157,   64,   63,   81,   81,   81,   81,   81,  137,  123,
      128,   81,   81,   81,   81,   81,   81,  129,  138,  138,
      143,  144,  145,  146,  129,  151,  152,  153,  155,  160,

      129,  145,  151,  143,  146,  163,  159,  144,  157,  152,
       81,   81,   81,   81,   81,   81,   83,   83,   83,   83,
       83,   83,  161,  232,   83,   83,   83,   83,   83,   83,
      153,  159,  153,  232,  170,  160,  160,  161,  162,  177,
      167,  155,  178,  173,  159,  180,  182,  163,  184,  166,
      185,  172,  179,   83,   83,   83,   83,   83,   83,   85,
       85,   85,   85,   85,   85,  170,  181,   85,   85,   85,
       85,   85,   85,  166,  162,  162,  166,  167,  172,  173,
      179,  184,  173,  172,  178,  177,  186,  187,  180,  182,
      180,  185,  191,  192,  181,  193,   85,   85,   85,   85,

       85,   85,   91,   91,   91,   91,   91,   91,  195,  181,
       91,   91,   91,   91,   91,   91,  194,  197,  196,  201,
      202,  203,  187,  204,  208, 1037,  210,  186,  187,  191,
      193,  209,  217,  192,  217,  217,  217,  217,  217,   91,
       91,   91,   91,   91,   91,  195,  196,  231,  239,  236,
      234,  231,  194,  208,  287,  235,  236,  239,  203,  235,
      201,  197,  204,  234,  202,  240,  209,  210,  218,  218,
      218,  218,  218,  240,  250,  250,  218,  218,  218,  218,
      218,  218,  222,  222,  222,  222,  222,  222,  223,  223,
      223,  223,  223,  223,  243,  287,  251,  260,  243,  251,

      249,  260,  812,  238,  241,  218,  218,  218,  218,  218,
      218,  219,  219,  219,  219,  219,  219,  238,  241,  219,
      219,  219,  219,  219,  219,  244,  245,  248,  244,  247,
      249,  257,  244,  274,  252,  255,  812,  248,  265,  265,
      258,  245,  258,  247,  252,  255,  257,  274,  219,  219,
      219,  219,  219,  219,  229,  229,  229,  229,  229,  258,
      259,  266,  229,  229,  229,  229,  229,  229,  264,  266,
      267,  268,  264,  269,  271,  268,  259,  270,  277,  270,
      277,  279,  267,  282,  276,  279,  281,  282,  269,  284,
      271,  229,  229,  229,  229,  229,  229,  276,  285,  281,

      288,  290,  289,  291,  292,  294,  293,  296,  298,  299,
      300,  301,  302,  297,  284,  305,  310,  304,  303,  308,
      312, 1036,  320,  322,  319,  306,  307,  309,  313,  314,
      290,  310,  311,  288,  315,  317,  285,  289,  299,  297,
      296,  292,  293,  318,  323,  291,  297,  294,  303,  304,
      302,  298,  300,  305,  306,  307,  309,  308,  314,  311,
      319,  313,  320,  315,  312,  321,  322,  324,  317,  301,
      325,  318,  326,  327,  330,  323,  329,  311,  331,  332,
      333,  334,  403,  335,  338,  338,  338,  338,  338,  339,
      345,  339,  339,  339,  339,  339,  346,  345,  321,  325,

      347,  326,  348,  346,  332,  330,  349,  331,  355,  333,
      349,  324,  372,  403,  347,  327,  335,  329,  355,  372,
      348,  340,  334,  340,  340,  340,  340,  340,  340,  341,
      341,  341,  341,  341,  341,  342,  342,  342,  342,  342,
      342,  343,  343,  343,  343,  343,  343,  350,  352,  353,
      352,  356,  357,  358,  359,  358,  360,  361,  364,  357,
      365,  361,  350,  353,  366,  360,  356,  364,  368,  369,
      371,  370,  373,  378,  359,  357,  368,  374,  366,  370,
      375,  398,  369,  371,  375,  376,  378,  374,  365,  373,
      377,  377,  376,  379,  380,  379,  382,  383,  387,  383,

      382,  384,  387,  384,  380,  385,  388,  385,  390,  389,
      388,  391,  390,  391,  394,  395,  395,  394,  399,  395,
      397,  397,  400,  398,  388,  389,  401,  405,  404,  406,
      407,  408,  409,  395,  388,  410,  412,  411,  408,  414,
      415,  416,  417,  395,  419,  420,  422,  424,  432,  421,
      426,  425,  430,  423,  429,  400,  405,  427,  433,  409,
      428,  412,  431,  440,  399,  437,  524,  406,  414,  401,
      404,  434,  435,  407,  411,  426,  436,  432,  416,  430,
      419,  438,  408,  410,  417,  421,  420,  422,  423,  425,
      428,  433,  427,  424,  437,  429,  415,  439,  434,  435,

      431,  441,  442,  436,  443,  524,  446,  440,  448,  457,
      468,  560,  457,  450,  438,  450,  450,  450,  450,  450,
      458,  439,  439,  458,  458,  459,  468,  560,  462,  442,
      446,  446,  446,  443,  441,  459,  448,  462,  453,  439,
      453,  453,  453,  453,  453,  453,  463,  464,  446,  467,
      471,  473,  474,  467,  464,  472,  474,  472,  475,  463,
      475,  476,  473,  478,  471,  479,  480,  482,  483,  482,
      484,  486,  483,  480,  479,  485,  476,  487,  489,  488,
      484,  478,  490,  491,  485,  493,  492,  495,  486,  488,
      496,  487,  490,  497,  499,  500,  501,  509,  489,  492,

      493,  504,  500,  501,  496,  502,  505,  491,  497,  499,
      505,  501,  508,  504,  510,  502,  495,  513,  514,  516,
      515,  518,  509,  504,  519,  509,  521,  525,  527,  523,
      504,  526,  529,  530,  532,  533,  534,  531,  508,  535,
      537,  536,  538,  539,  540,  541,  518,  543,  516,  542,
      544,  545,  510,  547,  513,  515,  523,  548,  526,  514,
      525,  534,  533,  532,  549,  550,  551,  553,  519,  521,
      530,  527,  531,  542,  552,  554,  577,  535,  536,  529,
      556,  539,  561,  541,  538,  537,  563,  565,  543,  561,
      577,  565,  540,  549,  545,  547,  566,  567,  658,  563,

      548,  551,  553,  569,  569,  556,  570,  544,  550, 1035,
      553,  566,  567,  554,  568,  552,  557,  557,  557,  557,
      557, 1034,  658,  568,  552,  558,  558,  558,  558,  558,
      559,  552,  559,  559,  559,  559,  559,  571,  573,  574,
      575,  576,  575,  582,  570,  580,  578,  571,  585,  574,
      578,  581,  582,  573,  589,  580,  583,  576,  581,  584,
      583,  586,  585,  584,  587,  588,  587,  591,  592,  594,
      586,  598,  599,  594,  588,  598,  600,  601,  603,  602,
      605,  604,  591,  589,  606,  607,  608,  599,  610,  611,
      612,  613,  600,  602,  601,  592,  604,  614,  615,  616,

      618,  619,  620,  621,  622,  603,  624,  623,  628,  627,
      625,  629,  626,  610,  607,  630,  633,  632,  636,  606,
      631,  634,  635,  638,  605,  614,  637,  608,  613,  620,
      641,  643,  611,  612,  627,  642,  615,  616,  644,  619,
      623,  628,  645,  618,  624,  625,  622,  631,  621,  626,
      634,  646,  630,  629,  632,  637,  638,  647,  655,  641,
      648,  636,  649,  649,  649,  649,  649,  655,  650,  654,
      663, 1033,  656,  633,  643,  645,  654,  635,  662,  663,
      653,  642,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  656,  644,  646,  653,  657,  659,  664,  665,

      657,  647,  660,  648,  660,  661,  666,  662,  665,  661,
      659,  662,  664,  667,  668,  670,  666,  669,  669,  671,
      673,  674,  679,  674,  670,  681,  671,  673,  675,  668,
      667,  677,  675,  682,  683,  677,  684,  686,  681,  687,
      689,  686,  688,  682,  690,  691,  693,  683,  694,  679,
      689,  688,  687,  684,  695,  691,  696,  697,  698,  699,
      700,  701,  702,  704,  703,  705,  690,  707,  706,  708,
      709,  710,  711,  719,  713,  720,  714,  715,  725,  721,
      722,  723,  698,  694,  726,  727,  717,  700,  729,  693,
      697,  695,  766,  728,  701,  730,  731,  824,  709,  824,

      699,  703,  705,  714,  696,  704,  706,  711,  710,  713,
      715,  717,  708,  707,  720,  766,  739,  725,  728,  702,
      721,  722,  736,  702,  727,  731,  723,  751,  719,  729,
      735,  751,  730,  742,  726,  733,  733,  733,  733,  733,
      735,  738,  736,  739,  743,  739,  739,  744,  742,  748,
      738,  750,  753,  756,  743,  757,  759,  744,  748,  758,
      759,  762,  753,  763,  750,  762,  757,  767,  764,  758,
      756,  743,  764,  765,  765,  768,  769,  763,  767,  770,
      771,  772,  774,  775,  776,  777,  780,  778,  779,  784,
      786,  769,  787,  790,  789,  792,  793,  791,  768,  794,

      795,  798,  800,  797,  799,  801,  802, 1030,  770,  803,
      808,  804,  821,  776,  777,  930,  821,  787,  771,  774,
      813,  807,  790,  817,  930,  780,  784,  779,  808,  772,
      778,  786,  789,  795,  792,  793,  797,  803,  775,  802,
      775,  775,  791,  779,  799,  807,  811,  801,  813,  818,
      794,  817,  798,  800,  804,  819,  811,  822,  823,  818,
      827,  828,  829,  830,  828,  832,  833,  835,  832,  834,
      811,  836,  822,  837,  838,  839,  823,  842,  830,  843,
      833,  835,  844,  827,  819,  834,  837,  848,  845,  849,
      829,  850,  853,  852,  854,  855,  856,  859,  838,  836,

      858,  860,  861,  863,  862,  864,  866,  871,  867,  874,
      873,  868,  875,  877,  896,  877,  842,  845,  852,  878,
      887,  839,  855,  898,  879,  856,  880,  860,  849,  842,
      874,  886,  866,  873,  871,  853,  887,  875,  844,  878,
      854,  843,  876,  848,  888,  861,  863,  879,  850,  862,
      867,  858,  868,  859,  881,  880,  876,  884,  881,  886,
      889,  864,  888,  890,  892,  893,  894,  884,  895,  896,
      899,  900,  895,  901,  898,  902,  904,  903,  892,  890,
      889,  905,  906,  907,  894,  909,  911,  912,  913,  914,
      915,  916,  893,  917,  921,  918,  920,  922,  926,  925,

      923,  928,  902,  924,  929,  931,  942,  934,  926,  943,
      933,  946,  907,  922,  923,  906,  901,  924,  921,  899,
      931,  920,  934,  909,  900,  903,  925,  904,  933,  928,
      935,  929,  913,  915,  912,  932,  937,  914,  905,  918,
      917,  940,  911,  941,  932,  944,  916,  945,  947,  949,
      951,  937,  941,  950,  943,  952,  953,  954,  942,  935,
      955,  960,  962,  956,  961,  964,  946,  968,  963,  972,
      940,  974,  980,  976,  978,  985,  968,  981,  989,  964,
      979,  991,  972,  992,  993,  994,  947,  951,  944,  963,
      945,  976,  978,  953,  979,  995,  997,  996,  952,  962,

      974, 1003, 1005, 1007,  954,  949,  956,  961,  950, 1001,
      997, 1000,  985,  993, 1011, 1000, 1010,  955,  960,  989,
      981,  980, 1012, 1014,  995, 1003, 1005, 1001, 1018, 1019,
      992, 1020,  994, 1021, 1023, 1024, 1027, 1018,  991,  996,
     1025, 1010, 1026, 1028, 1031, 1032, 1007, 1029, 1022, 1017,
     1027, 1016, 1015, 1019, 1020, 1013, 1021, 1009, 1008, 1006,
     1004, 1011, 1002,  999,  998,  990, 1028,  988,  987,  986,
      984, 1023,  983,  982, 1012, 1014,  977,  975,  973,  971,
      970,  969,  967,  966,  965,  959, 1031, 1024,  958,  957,
      948, 1025,  939, 1026,  938,  936, 1032, 1040,  927, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041,  919,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042,  910, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1043, 1043,
     1043, 1043,  908, 1043, 1043, 1044,  897, 1044, 1044, 1044,
     1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1047,  891, 1047,  885, 1047, 1047, 1048, 1048, 1048,
     1049, 1049, 1050,  883, 1050, 1050, 1051, 1051,  882, 1051,
      872, 1051, 1051, 1052,  870,  869, 1052,  865, 1052, 1052,
     1053, 1053, 1054, 1054, 1055,  857, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055,  851,  847,  846,  841,  840,

      831,  826,  825,  820,  816,  815,  814,  810,  809,  805,
      796,  788,  785,  783,  782,  781,  773,  761,  755,  754,
      752,  749,  747,  746,  745,  741,  740,  737,  734,  732,
      724,  718,  716,  712,  692,  685,  680,  678,  676,  672,
      652,  640,  639,  617,  609,  597,  596,  595,  593,  590,
      579,  572,  564,  562,  555,  546,  528,  522,  520,  517,
      512,  511,  507,  506,  503,  498,  494,  481,  477,  470,
      469,  466,  465,  461,  460,  456,  455,  454,  451,  449,
      447,  444,  418,  413,  402,  396,  393,  392,  386,  381,
      367,  363,  362,  354,  351,  344,  337,  336,  328,  316,

      295,  286,  283,  280,  278,  275,  273,  272,  263,  262,
      261,  256,  254,  253,  246,  242,  237,  233,  228,  226,
      215,  213,  207,  206,  205,  200,  199,  198,  190,  189,
      188,  183,  175,  174,  171,  169,  168,  165,  164,  158,
      150,  149,  148,  147,  142,  141,  140,  132,  131,  130,
      125,  117,  116,  113,  111,  110,  108,  106,  105,   99,
       93,   89,   86,   82,   77,   75,   68,   32,   22,   20,
       10,    9,    8,    7,    3, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "external/selinux/checkpolicy/policy_scan.l"
/* 
 * Author : Stephen Smalley, <sds@epoch.ncsc.mil> 
 */
/* Updated: David Caplan, <dac@tresys.com>
 *
 * 	Added conditional policy language extensions
 *
 *          Jason Tang    <jtang@tresys.com>
 *
 *	Added support for binary policy modules
 *
 * Copyright (C) 2003-5 Tresys Technology, LLC
 *	This program is free software; you can redistribute it and/or modify
 *  	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, version 2.
 */
/* FLASK */
#line 23 "external/selinux/checkpolicy/policy_scan.l"
#include <sys/types.h>
#include <limits.h>
#include <stdint.h>
#include <string.h>

typedef int (* require_func_t)(void);

#ifdef ANDROID
#include "policy_parse.h"
#else
#include "y.tab.h"
#endif

static char linebuf[2][255];
static unsigned int lno = 0;
int yywarn(const char *msg);

void set_source_file(const char *name);

char source_file[PATH_MAX];
unsigned long source_lineno = 1;

unsigned long policydb_lineno = 1;

unsigned int policydb_errors = 0;
#define YY_NO_INPUT 1
#line 1395 "/root/oran/out/host/linux-x86/obj/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 58 "external/selinux/checkpolicy/policy_scan.l"

#line 1604 "/root/oran/out/host/linux-x86/obj/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1040 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2376 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "external/selinux/checkpolicy/policy_scan.l"
{ strncpy(linebuf[lno], yytext+1, 255);
                                  linebuf[lno][254] = 0;
                                  lno = 1 - lno; 
                                  policydb_lineno++;
				  source_lineno++;
                                  yyless(1); }
	YY_BREAK
case 2:
#line 66 "external/selinux/checkpolicy/policy_scan.l"
case 3:
YY_RULE_SETUP
#line 66 "external/selinux/checkpolicy/policy_scan.l"
{ return(CLONE); }
	YY_BREAK
case 4:
#line 68 "external/selinux/checkpolicy/policy_scan.l"
case 5:
YY_RULE_SETUP
#line 68 "external/selinux/checkpolicy/policy_scan.l"
{ return(COMMON); }
	YY_BREAK
case 6:
#line 70 "external/selinux/checkpolicy/policy_scan.l"
case 7:
YY_RULE_SETUP
#line 70 "external/selinux/checkpolicy/policy_scan.l"
{ return(CLASS); }
	YY_BREAK
case 8:
#line 72 "external/selinux/checkpolicy/policy_scan.l"
case 9:
YY_RULE_SETUP
#line 72 "external/selinux/checkpolicy/policy_scan.l"
{ return(CONSTRAIN); }
	YY_BREAK
case 10:
#line 74 "external/selinux/checkpolicy/policy_scan.l"
case 11:
YY_RULE_SETUP
#line 74 "external/selinux/checkpolicy/policy_scan.l"
{ return(VALIDATETRANS); }
	YY_BREAK
case 12:
#line 76 "external/selinux/checkpolicy/policy_scan.l"
case 13:
YY_RULE_SETUP
#line 76 "external/selinux/checkpolicy/policy_scan.l"
{ return(INHERITS); }
	YY_BREAK
case 14:
#line 78 "external/selinux/checkpolicy/policy_scan.l"
case 15:
YY_RULE_SETUP
#line 78 "external/selinux/checkpolicy/policy_scan.l"
{ return(SID); }
	YY_BREAK
case 16:
#line 80 "external/selinux/checkpolicy/policy_scan.l"
case 17:
YY_RULE_SETUP
#line 80 "external/selinux/checkpolicy/policy_scan.l"
{ return(ROLE); }
	YY_BREAK
case 18:
#line 82 "external/selinux/checkpolicy/policy_scan.l"
case 19:
YY_RULE_SETUP
#line 82 "external/selinux/checkpolicy/policy_scan.l"
{ return(ROLES); }
	YY_BREAK
case 20:
#line 84 "external/selinux/checkpolicy/policy_scan.l"
case 21:
YY_RULE_SETUP
#line 84 "external/selinux/checkpolicy/policy_scan.l"
{ return(ROLEATTRIBUTE);}
	YY_BREAK
case 22:
#line 86 "external/selinux/checkpolicy/policy_scan.l"
case 23:
YY_RULE_SETUP
#line 86 "external/selinux/checkpolicy/policy_scan.l"
{ return(ATTRIBUTE_ROLE);}
	YY_BREAK
case 24:
#line 88 "external/selinux/checkpolicy/policy_scan.l"
case 25:
YY_RULE_SETUP
#line 88 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPES); }
	YY_BREAK
case 26:
#line 90 "external/selinux/checkpolicy/policy_scan.l"
case 27:
YY_RULE_SETUP
#line 90 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPEALIAS); }
	YY_BREAK
case 28:
#line 92 "external/selinux/checkpolicy/policy_scan.l"
case 29:
YY_RULE_SETUP
#line 92 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPEATTRIBUTE); }
	YY_BREAK
case 30:
#line 94 "external/selinux/checkpolicy/policy_scan.l"
case 31:
YY_RULE_SETUP
#line 94 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPEBOUNDS); }
	YY_BREAK
case 32:
#line 96 "external/selinux/checkpolicy/policy_scan.l"
case 33:
YY_RULE_SETUP
#line 96 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPE); }
	YY_BREAK
case 34:
#line 98 "external/selinux/checkpolicy/policy_scan.l"
case 35:
YY_RULE_SETUP
#line 98 "external/selinux/checkpolicy/policy_scan.l"
{ return(BOOL); }
	YY_BREAK
case 36:
#line 100 "external/selinux/checkpolicy/policy_scan.l"
case 37:
YY_RULE_SETUP
#line 100 "external/selinux/checkpolicy/policy_scan.l"
{ return(TUNABLE); }
	YY_BREAK
case 38:
#line 102 "external/selinux/checkpolicy/policy_scan.l"
case 39:
YY_RULE_SETUP
#line 102 "external/selinux/checkpolicy/policy_scan.l"
{ return(IF); }
	YY_BREAK
case 40:
#line 104 "external/selinux/checkpolicy/policy_scan.l"
case 41:
YY_RULE_SETUP
#line 104 "external/selinux/checkpolicy/policy_scan.l"
{ return(ELSE); }
	YY_BREAK
case 42:
#line 106 "external/selinux/checkpolicy/policy_scan.l"
case 43:
YY_RULE_SETUP
#line 106 "external/selinux/checkpolicy/policy_scan.l"
{ return(ALIAS); }
	YY_BREAK
case 44:
#line 108 "external/selinux/checkpolicy/policy_scan.l"
case 45:
YY_RULE_SETUP
#line 108 "external/selinux/checkpolicy/policy_scan.l"
{ return(ATTRIBUTE); }
	YY_BREAK
case 46:
#line 110 "external/selinux/checkpolicy/policy_scan.l"
case 47:
YY_RULE_SETUP
#line 110 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPE_TRANSITION); }
	YY_BREAK
case 48:
#line 112 "external/selinux/checkpolicy/policy_scan.l"
case 49:
YY_RULE_SETUP
#line 112 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPE_MEMBER); }
	YY_BREAK
case 50:
#line 114 "external/selinux/checkpolicy/policy_scan.l"
case 51:
YY_RULE_SETUP
#line 114 "external/selinux/checkpolicy/policy_scan.l"
{ return(TYPE_CHANGE); }
	YY_BREAK
case 52:
#line 116 "external/selinux/checkpolicy/policy_scan.l"
case 53:
YY_RULE_SETUP
#line 116 "external/selinux/checkpolicy/policy_scan.l"
{ return(ROLE_TRANSITION); }
	YY_BREAK
case 54:
#line 118 "external/selinux/checkpolicy/policy_scan.l"
case 55:
YY_RULE_SETUP
#line 118 "external/selinux/checkpolicy/policy_scan.l"
{ return(RANGE_TRANSITION); }
	YY_BREAK
case 56:
#line 120 "external/selinux/checkpolicy/policy_scan.l"
case 57:
YY_RULE_SETUP
#line 120 "external/selinux/checkpolicy/policy_scan.l"
{ return(SENSITIVITY); }
	YY_BREAK
case 58:
#line 122 "external/selinux/checkpolicy/policy_scan.l"
case 59:
YY_RULE_SETUP
#line 122 "external/selinux/checkpolicy/policy_scan.l"
{ return(DOMINANCE); }
	YY_BREAK
case 60:
#line 124 "external/selinux/checkpolicy/policy_scan.l"
case 61:
YY_RULE_SETUP
#line 124 "external/selinux/checkpolicy/policy_scan.l"
{ return(CATEGORY); }
	YY_BREAK
case 62:
#line 126 "external/selinux/checkpolicy/policy_scan.l"
case 63:
YY_RULE_SETUP
#line 126 "external/selinux/checkpolicy/policy_scan.l"
{ return(LEVEL); }
	YY_BREAK
case 64:
#line 128 "external/selinux/checkpolicy/policy_scan.l"
case 65:
YY_RULE_SETUP
#line 128 "external/selinux/checkpolicy/policy_scan.l"
{ return(RANGE); }
	YY_BREAK
case 66:
#line 130 "external/selinux/checkpolicy/policy_scan.l"
case 67:
YY_RULE_SETUP
#line 130 "external/selinux/checkpolicy/policy_scan.l"
{ return(MLSCONSTRAIN); }
	YY_BREAK
case 68:
#line 132 "external/selinux/checkpolicy/policy_scan.l"
case 69:
YY_RULE_SETUP
#line 132 "external/selinux/checkpolicy/policy_scan.l"
{ return(MLSVALIDATETRANS); }
	YY_BREAK
case 70:
#line 134 "external/selinux/checkpolicy/policy_scan.l"
case 71:
YY_RULE_SETUP
#line 134 "external/selinux/checkpolicy/policy_scan.l"
{ return(USER); }
	YY_BREAK
case 72:
#line 136 "external/selinux/checkpolicy/policy_scan.l"
case 73:
YY_RULE_SETUP
#line 136 "external/selinux/checkpolicy/policy_scan.l"
{ return(NEVERALLOW); }
	YY_BREAK
case 74:
#line 138 "external/selinux/checkpolicy/policy_scan.l"
case 75:
YY_RULE_SETUP
#line 138 "external/selinux/checkpolicy/policy_scan.l"
{ return(ALLOW); }
	YY_BREAK
case 76:
#line 140 "external/selinux/checkpolicy/policy_scan.l"
case 77:
YY_RULE_SETUP
#line 140 "external/selinux/checkpolicy/policy_scan.l"
{ return(AUDITALLOW); }
	YY_BREAK
case 78:
#line 142 "external/selinux/checkpolicy/policy_scan.l"
case 79:
YY_RULE_SETUP
#line 142 "external/selinux/checkpolicy/policy_scan.l"
{ return(AUDITDENY); }
	YY_BREAK
case 80:
#line 144 "external/selinux/checkpolicy/policy_scan.l"
case 81:
YY_RULE_SETUP
#line 144 "external/selinux/checkpolicy/policy_scan.l"
{ return(DONTAUDIT); }
	YY_BREAK
case 82:
#line 146 "external/selinux/checkpolicy/policy_scan.l"
case 83:
YY_RULE_SETUP
#line 146 "external/selinux/checkpolicy/policy_scan.l"
{ return(SOURCE); }
	YY_BREAK
case 84:
#line 148 "external/selinux/checkpolicy/policy_scan.l"
case 85:
YY_RULE_SETUP
#line 148 "external/selinux/checkpolicy/policy_scan.l"
{ return(TARGET); }
	YY_BREAK
case 86:
#line 150 "external/selinux/checkpolicy/policy_scan.l"
case 87:
YY_RULE_SETUP
#line 150 "external/selinux/checkpolicy/policy_scan.l"
{ return(SAMEUSER);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 151 "external/selinux/checkpolicy/policy_scan.l"
{ return(MODULE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 152 "external/selinux/checkpolicy/policy_scan.l"
{ return(REQUIRE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 153 "external/selinux/checkpolicy/policy_scan.l"
{ return(OPTIONAL); }
	YY_BREAK
case 91:
#line 155 "external/selinux/checkpolicy/policy_scan.l"
case 92:
YY_RULE_SETUP
#line 155 "external/selinux/checkpolicy/policy_scan.l"
{ return(OR);}
	YY_BREAK
case 93:
#line 157 "external/selinux/checkpolicy/policy_scan.l"
case 94:
YY_RULE_SETUP
#line 157 "external/selinux/checkpolicy/policy_scan.l"
{ return(AND);}
	YY_BREAK
case 95:
#line 159 "external/selinux/checkpolicy/policy_scan.l"
case 96:
YY_RULE_SETUP
#line 159 "external/selinux/checkpolicy/policy_scan.l"
{ return(NOT);}
	YY_BREAK
case 97:
#line 161 "external/selinux/checkpolicy/policy_scan.l"
case 98:
YY_RULE_SETUP
#line 161 "external/selinux/checkpolicy/policy_scan.l"
{ return(XOR); }
	YY_BREAK
case 99:
#line 163 "external/selinux/checkpolicy/policy_scan.l"
case 100:
YY_RULE_SETUP
#line 163 "external/selinux/checkpolicy/policy_scan.l"
{ return(EQUALS);}
	YY_BREAK
case 101:
#line 165 "external/selinux/checkpolicy/policy_scan.l"
case 102:
YY_RULE_SETUP
#line 165 "external/selinux/checkpolicy/policy_scan.l"
{ return(CTRUE); } 
	YY_BREAK
case 103:
#line 167 "external/selinux/checkpolicy/policy_scan.l"
case 104:
YY_RULE_SETUP
#line 167 "external/selinux/checkpolicy/policy_scan.l"
{ return(CFALSE); } 
	YY_BREAK
case 105:
#line 169 "external/selinux/checkpolicy/policy_scan.l"
case 106:
YY_RULE_SETUP
#line 169 "external/selinux/checkpolicy/policy_scan.l"
{ return(DOM);}
	YY_BREAK
case 107:
#line 171 "external/selinux/checkpolicy/policy_scan.l"
case 108:
YY_RULE_SETUP
#line 171 "external/selinux/checkpolicy/policy_scan.l"
{ return(DOMBY);}
	YY_BREAK
case 109:
#line 173 "external/selinux/checkpolicy/policy_scan.l"
case 110:
YY_RULE_SETUP
#line 173 "external/selinux/checkpolicy/policy_scan.l"
{ return(INCOMP);}
	YY_BREAK
case 111:
#line 175 "external/selinux/checkpolicy/policy_scan.l"
case 112:
YY_RULE_SETUP
#line 175 "external/selinux/checkpolicy/policy_scan.l"
{ return(FSCON);}
	YY_BREAK
case 113:
#line 177 "external/selinux/checkpolicy/policy_scan.l"
case 114:
YY_RULE_SETUP
#line 177 "external/selinux/checkpolicy/policy_scan.l"
{ return(PORTCON);}
	YY_BREAK
case 115:
#line 179 "external/selinux/checkpolicy/policy_scan.l"
case 116:
YY_RULE_SETUP
#line 179 "external/selinux/checkpolicy/policy_scan.l"
{ return(NETIFCON);}
	YY_BREAK
case 117:
#line 181 "external/selinux/checkpolicy/policy_scan.l"
case 118:
YY_RULE_SETUP
#line 181 "external/selinux/checkpolicy/policy_scan.l"
{ return(NODECON);}
	YY_BREAK
case 119:
#line 183 "external/selinux/checkpolicy/policy_scan.l"
case 120:
YY_RULE_SETUP
#line 183 "external/selinux/checkpolicy/policy_scan.l"
{ return(PIRQCON);}
	YY_BREAK
case 121:
#line 185 "external/selinux/checkpolicy/policy_scan.l"
case 122:
YY_RULE_SETUP
#line 185 "external/selinux/checkpolicy/policy_scan.l"
{ return(IOMEMCON);}
	YY_BREAK
case 123:
#line 187 "external/selinux/checkpolicy/policy_scan.l"
case 124:
YY_RULE_SETUP
#line 187 "external/selinux/checkpolicy/policy_scan.l"
{ return(IOPORTCON);}
	YY_BREAK
case 125:
#line 189 "external/selinux/checkpolicy/policy_scan.l"
case 126:
YY_RULE_SETUP
#line 189 "external/selinux/checkpolicy/policy_scan.l"
{ return(PCIDEVICECON);}
	YY_BREAK
case 127:
#line 191 "external/selinux/checkpolicy/policy_scan.l"
case 128:
YY_RULE_SETUP
#line 191 "external/selinux/checkpolicy/policy_scan.l"
{ return(DEVICETREECON);}
	YY_BREAK
case 129:
#line 193 "external/selinux/checkpolicy/policy_scan.l"
case 130:
YY_RULE_SETUP
#line 193 "external/selinux/checkpolicy/policy_scan.l"
{ return(FSUSEXATTR);}
	YY_BREAK
case 131:
#line 195 "external/selinux/checkpolicy/policy_scan.l"
case 132:
YY_RULE_SETUP
#line 195 "external/selinux/checkpolicy/policy_scan.l"
{ return(FSUSETASK);}
	YY_BREAK
case 133:
#line 197 "external/selinux/checkpolicy/policy_scan.l"
case 134:
YY_RULE_SETUP
#line 197 "external/selinux/checkpolicy/policy_scan.l"
{ return(FSUSETRANS);}
	YY_BREAK
case 135:
#line 199 "external/selinux/checkpolicy/policy_scan.l"
case 136:
YY_RULE_SETUP
#line 199 "external/selinux/checkpolicy/policy_scan.l"
{ return(GENFSCON);}
	YY_BREAK
case 137:
#line 201 "external/selinux/checkpolicy/policy_scan.l"
case 138:
YY_RULE_SETUP
#line 201 "external/selinux/checkpolicy/policy_scan.l"
{ return(R1); }
	YY_BREAK
case 139:
#line 203 "external/selinux/checkpolicy/policy_scan.l"
case 140:
YY_RULE_SETUP
#line 203 "external/selinux/checkpolicy/policy_scan.l"
{ return(R2); }
	YY_BREAK
case 141:
#line 205 "external/selinux/checkpolicy/policy_scan.l"
case 142:
YY_RULE_SETUP
#line 205 "external/selinux/checkpolicy/policy_scan.l"
{ return(R3); }
	YY_BREAK
case 143:
#line 207 "external/selinux/checkpolicy/policy_scan.l"
case 144:
YY_RULE_SETUP
#line 207 "external/selinux/checkpolicy/policy_scan.l"
{ return(U1); }
	YY_BREAK
case 145:
#line 209 "external/selinux/checkpolicy/policy_scan.l"
case 146:
YY_RULE_SETUP
#line 209 "external/selinux/checkpolicy/policy_scan.l"
{ return(U2); }
	YY_BREAK
case 147:
#line 211 "external/selinux/checkpolicy/policy_scan.l"
case 148:
YY_RULE_SETUP
#line 211 "external/selinux/checkpolicy/policy_scan.l"
{ return(U3); }
	YY_BREAK
case 149:
#line 213 "external/selinux/checkpolicy/policy_scan.l"
case 150:
YY_RULE_SETUP
#line 213 "external/selinux/checkpolicy/policy_scan.l"
{ return(T1); }
	YY_BREAK
case 151:
#line 215 "external/selinux/checkpolicy/policy_scan.l"
case 152:
YY_RULE_SETUP
#line 215 "external/selinux/checkpolicy/policy_scan.l"
{ return(T2); }
	YY_BREAK
case 153:
#line 217 "external/selinux/checkpolicy/policy_scan.l"
case 154:
YY_RULE_SETUP
#line 217 "external/selinux/checkpolicy/policy_scan.l"
{ return(T3); }
	YY_BREAK
case 155:
#line 219 "external/selinux/checkpolicy/policy_scan.l"
case 156:
YY_RULE_SETUP
#line 219 "external/selinux/checkpolicy/policy_scan.l"
{ return(L1); }
	YY_BREAK
case 157:
#line 221 "external/selinux/checkpolicy/policy_scan.l"
case 158:
YY_RULE_SETUP
#line 221 "external/selinux/checkpolicy/policy_scan.l"
{ return(L2); }
	YY_BREAK
case 159:
#line 223 "external/selinux/checkpolicy/policy_scan.l"
case 160:
YY_RULE_SETUP
#line 223 "external/selinux/checkpolicy/policy_scan.l"
{ return(H1); }
	YY_BREAK
case 161:
#line 225 "external/selinux/checkpolicy/policy_scan.l"
case 162:
YY_RULE_SETUP
#line 225 "external/selinux/checkpolicy/policy_scan.l"
{ return(H2); }
	YY_BREAK
case 163:
#line 227 "external/selinux/checkpolicy/policy_scan.l"
case 164:
YY_RULE_SETUP
#line 227 "external/selinux/checkpolicy/policy_scan.l"
{ return(POLICYCAP); }
	YY_BREAK
case 165:
#line 229 "external/selinux/checkpolicy/policy_scan.l"
case 166:
YY_RULE_SETUP
#line 229 "external/selinux/checkpolicy/policy_scan.l"
{ return(PERMISSIVE); }
	YY_BREAK
case 167:
#line 231 "external/selinux/checkpolicy/policy_scan.l"
case 168:
YY_RULE_SETUP
#line 231 "external/selinux/checkpolicy/policy_scan.l"
{ return(DEFAULT_USER); }
	YY_BREAK
case 169:
#line 233 "external/selinux/checkpolicy/policy_scan.l"
case 170:
YY_RULE_SETUP
#line 233 "external/selinux/checkpolicy/policy_scan.l"
{ return(DEFAULT_ROLE); }
	YY_BREAK
case 171:
#line 235 "external/selinux/checkpolicy/policy_scan.l"
case 172:
YY_RULE_SETUP
#line 235 "external/selinux/checkpolicy/policy_scan.l"
{ return(DEFAULT_TYPE); }
	YY_BREAK
case 173:
#line 237 "external/selinux/checkpolicy/policy_scan.l"
case 174:
YY_RULE_SETUP
#line 237 "external/selinux/checkpolicy/policy_scan.l"
{ return(DEFAULT_RANGE); }
	YY_BREAK
case 175:
#line 239 "external/selinux/checkpolicy/policy_scan.l"
case 176:
YY_RULE_SETUP
#line 239 "external/selinux/checkpolicy/policy_scan.l"
{ return(LOW_HIGH); }
	YY_BREAK
case 177:
#line 241 "external/selinux/checkpolicy/policy_scan.l"
case 178:
YY_RULE_SETUP
#line 241 "external/selinux/checkpolicy/policy_scan.l"
{ return(HIGH); }
	YY_BREAK
case 179:
#line 243 "external/selinux/checkpolicy/policy_scan.l"
case 180:
YY_RULE_SETUP
#line 243 "external/selinux/checkpolicy/policy_scan.l"
{ return(LOW); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 244 "external/selinux/checkpolicy/policy_scan.l"
{ return(PATH); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 245 "external/selinux/checkpolicy/policy_scan.l"
{ return(QPATH); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 246 "external/selinux/checkpolicy/policy_scan.l"
{ return(FILENAME); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 247 "external/selinux/checkpolicy/policy_scan.l"
{ return(IDENTIFIER); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 248 "external/selinux/checkpolicy/policy_scan.l"
{ return(NUMBER); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 249 "external/selinux/checkpolicy/policy_scan.l"
{ return(FILESYSTEM); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 250 "external/selinux/checkpolicy/policy_scan.l"
{ return(IPV4_ADDR); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 251 "external/selinux/checkpolicy/policy_scan.l"
{ return(IPV6_ADDR); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 252 "external/selinux/checkpolicy/policy_scan.l"
{ return(VERSION_IDENTIFIER); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 253 "external/selinux/checkpolicy/policy_scan.l"
{ set_source_file(yytext+9); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 254 "external/selinux/checkpolicy/policy_scan.l"
{ source_lineno = atoi(yytext+6)-1; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 255 "external/selinux/checkpolicy/policy_scan.l"
{ /* delete comments */ }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 256 "external/selinux/checkpolicy/policy_scan.l"
{ /* delete whitespace */ }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 257 "external/selinux/checkpolicy/policy_scan.l"
{ return(EQUALS); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 258 "external/selinux/checkpolicy/policy_scan.l"
{ return (NOTEQUAL); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 259 "external/selinux/checkpolicy/policy_scan.l"
{ return (AND); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 260 "external/selinux/checkpolicy/policy_scan.l"
{ return (OR); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 261 "external/selinux/checkpolicy/policy_scan.l"
{ return (NOT); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 262 "external/selinux/checkpolicy/policy_scan.l"
{ return (XOR); }
	YY_BREAK
case 200:
#line 264 "external/selinux/checkpolicy/policy_scan.l"
case 201:
#line 265 "external/selinux/checkpolicy/policy_scan.l"
case 202:
#line 266 "external/selinux/checkpolicy/policy_scan.l"
case 203:
#line 267 "external/selinux/checkpolicy/policy_scan.l"
case 204:
#line 268 "external/selinux/checkpolicy/policy_scan.l"
case 205:
#line 269 "external/selinux/checkpolicy/policy_scan.l"
case 206:
#line 270 "external/selinux/checkpolicy/policy_scan.l"
case 207:
#line 271 "external/selinux/checkpolicy/policy_scan.l"
case 208:
#line 272 "external/selinux/checkpolicy/policy_scan.l"
case 209:
#line 273 "external/selinux/checkpolicy/policy_scan.l"
case 210:
#line 274 "external/selinux/checkpolicy/policy_scan.l"
case 211:
#line 275 "external/selinux/checkpolicy/policy_scan.l"
case 212:
YY_RULE_SETUP
#line 275 "external/selinux/checkpolicy/policy_scan.l"
{ return(yytext[0]); } 
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 276 "external/selinux/checkpolicy/policy_scan.l"
{ yywarn("unrecognized character");}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 277 "external/selinux/checkpolicy/policy_scan.l"
ECHO;
	YY_BREAK
#line 2437 "/root/oran/out/host/linux-x86/obj/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1040 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1040 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1039);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 277 "external/selinux/checkpolicy/policy_scan.l"


int yyerror(const char *msg)
{
	if (source_file[0])
		fprintf(stderr, "%s:%ld:",
			source_file, source_lineno);
	else
		fprintf(stderr, "(unknown source)::");
	fprintf(stderr, "ERROR '%s' at token '%s' on line %ld:\n%s\n%s\n",
			msg,
			yytext,
			policydb_lineno,
			linebuf[0], linebuf[1]);
	policydb_errors++;
	return -1;
}

int yywarn(const char *msg)
{
	if (source_file[0])
		fprintf(stderr, "%s:%ld:",
			source_file, source_lineno);
	else
		fprintf(stderr, "(unknown source)::");
	fprintf(stderr, "WARNING '%s' at token '%s' on line %ld:\n%s\n%s\n",
			msg,
			yytext,
			policydb_lineno,
			linebuf[0], linebuf[1]);
	return 0;
}

void set_source_file(const char *name)
{
	source_lineno = 1;
	strncpy(source_file, name, sizeof(source_file)-1); 
	source_file[sizeof(source_file)-1] = '\0';
	if (strlen(source_file) && source_file[strlen(source_file)-1] == '"')
		source_file[strlen(source_file)-1] = '\0';
}

